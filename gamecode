import pygame
import sys
import speech_recognition as sr

pygame.init()

# Display setup (edit later)
screen = pygame.display.set_mode((900, 1700))
pygame.display.set_caption("Select Difficulty")

# Font setup (edit later)
font = pygame.font.SysFont(None, 24)

# Colors (edit later)
WHITE = (255, 255, 255)
GRAY = (200, 200, 200)
BLACK = (0, 0, 0)

# Load microphone icon
mic_icon = pygame.image.load("mic_icon.png")
mic_icon = pygame.transform.scale(mic_icon, (30, 30))

# Button setup: (label, rectangle)
difficulty_buttons = [
    ("Easy", pygame.Rect(200, 60, 200, 50)),
    ("Medium", pygame.Rect(200, 140, 200, 50)),
    ("Hard", pygame.Rect(200, 220, 200, 50)),
]

# Options per difficulty
options = {
    "Easy": [
        "The Sandwich", "My Strange Pet", "Adventure Time",
        "My Inspiration", "A Game of Thrones"
    ],
    "Medium": [
        "Camp Nightmare", "Science Fair", "The Captain’s Journey",
        "Animal Farm", "The Art Offender"
    ],
    "Hard": [
        "Interstellar", "The Upside Down", "The Adventurer’s Deception",
        "Planet Strange", "A Son’s Journey"
    ]
}

# Prompts and templates for individual stories
story_data = {
    "The Sandwich": {
        "prompts": [
            "Enter an adjective:", "Enter a type of food:", "Enter another type of food:",
            "Enter a noun:", "Enter a liquid:", "Enter a plural noun:",
            "Enter another adjective:", "Enter a person's name:", "Enter an animal:",
            "Enter an emotion:", "Enter another noun:", "Enter a color:"
        ],
        "template": """
I was so {0} today that I forgot to pack my lunch!
So, I grabbed whatever I could find in the kitchen and made a sandwich with {1}, {2}, and a slice of {3}.
Then I added a squirt of {4}, a handful of {5}, and smushed it all between two pieces of {6} bread.
When I brought it to school, my friend {7} said it looked like a {8}.
I took one bite and immediately felt {9}.
It made a sound like a {10} when I chewed it, and I may have turned slightly {11}.
I guess next time I’ll just pack a normal lunch!
"""
    },
    "My Strange Pet": {
        "prompts": [
            "Enter an animal:", "Enter an adjective:", "Enter a verb ending in -ing:",
            "Enter a noun:", "Enter a clothing item:", "Enter a place:",
            "Enter a device:", "Enter a food:", "Enter an exclamation:",
            "Enter a nonsense word:", "Enter another noun:", "Enter a silly name:"
        ],
        "template": """
My pet {0} is the most {1} creature I’ve ever met.
    Every morning, it wakes me up by {2} on my bed and eating my {3} right off my desk.
    It loves to wear my {4} and parade around the {5} like royalty.
    Last week, it even tried to use my {6} to order {7} online.
    Sometimes it talks in its sleep, muttering words like “{8}!” and “{9}!”
    I don’t know if it’s a pet or a {10}, but I love it anyway.
    I think I’ll name it {11}... again.
"""
    },

    # You can add more stories in the same format here
}
def create_option_buttons(option_texts):
    buttons = []
    y_start = 40
    for i, text in enumerate(option_texts):
        rect = pygame.Rect(100, y_start + i * 60, 400, 50)
        buttons.append((text, rect))
    return buttons


def draw_buttons(button_list):
    for text, rect in button_list:
        pygame.draw.rect(screen, GRAY, rect)
        label = font.render(text, True, BLACK)
        label_rect = label.get_rect(center=rect.center)
        screen.blit(label, label_rect)


class InputBox:  # this helps set it up so we dont need to enter each time
    def __init__(self, x, y, w, h, prompt):
        self.rect = pygame.Rect(x, y, w, h)
        self.color = GRAY
        self.text = ''
        self.prompt = prompt
        self.active = False
        self.voice_button_rect = pygame.Rect(x + w + 10, y, 40, h)

    def handle_event(self, event):
        if event.type == pygame.MOUSEBUTTONDOWN:
            if self.rect.collidepoint(event.pos):
                self.active = True
                self.color = BLACK
            else:
                self.active = False
                self.color = GRAY
    
            if self.voice_button_rect.collidepoint(event.pos):
                self.text = InputBox.listen_for_input() or ""
                self.active = False
                self.color = GRAY

        elif event.type == pygame.KEYDOWN and self.active:
            if event.key == pygame.K_BACKSPACE:
                self.text = self.text[:-1]
            elif event.key == pygame.K_RETURN:
                self.active = False
                self.color = GRAY
            else:
                self.text += event.unicode

    def draw(self, screen, font):
        pygame.draw.rect(screen, self.color, self.rect, 2)
        prompt_surface = font.render(self.prompt, True, BLACK)
        text_surface = font.render(self.text, True, BLACK)
        screen.blit(prompt_surface, (self.rect.x, self.rect.y - 25))
        screen.blit(text_surface, (self.rect.x + 5, self.rect.y + 5))

        pygame.draw.rect(screen, GRAY, self.voice_button_rect)
        screen.blit(mic_icon, self.voice_button_rect.topleft)
        
    @staticmethod
    def listen_for_input():
        recognizer = sr.Recognizer()
        with sr.Microphone() as source:
            print("Listening for input...")
            recognizer.adjust_for_ambient_noise(source)
            audio = recognizer.listen(source)
        try:
            print("Recognizing...")
            text = recognizer.recognize_google(audio)
            print(f"You said: {text}")
            return text
        except sr.UnknownValueError:
            print("Sorry, I could not understand the audio.")
        except sr.RequestError:
            print("Could not request results from Google Speech Recognition service.")
            return None

def main():
    final_story = ""
    selected_difficulty = None
    story_selected = ""
    stage = 1  # 1 = choose difficulty, 2 = choose story, 3 = input words
    option_buttons = []
    running = True
    story_inputs = []

    while running:
        screen.fill(WHITE)

        #  DRAWING
        if stage == 1:
            draw_buttons(difficulty_buttons)
        elif stage == 2:
            draw_buttons(option_buttons)
        elif stage == 3:
            for box in story_inputs:
                box.draw(screen, font)
        elif stage == 4:
            story_lines = final_story.splitlines()
            y = 150
            for line in story_lines:
                text_surface = font.render(line, True, BLACK)
                screen.blit(text_surface, (50, y))
                y += 40

        # EVENTS
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
                break

            if event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
                if stage == 1:
                    for text, rect in difficulty_buttons:
                        if rect.collidepoint(event.pos):
                            selected_difficulty = text
                            option_buttons = create_option_buttons(options[selected_difficulty])
                            stage = 2
                            break

                elif stage == 2:
                    for text, rect in option_buttons:
                        if rect.collidepoint(event.pos):
                            story_selected = text
                            story_inputs = []
                            if story_selected in story_data:
                                prompts = story_data[story_selected]["prompts"]
                                for i, prompt in enumerate(prompts):
                                    y = 60 + i * 60
                                    story_inputs.append(InputBox(100, y, 400, 40, prompt))
                            stage = 3
                            break

            # Handle input boxes for stage 3
            if stage == 3:
                for box in story_inputs:
                    box.handle_event(event)

                if event.type == pygame.KEYDOWN and event.key == pygame.K_RETURN:
                    inputs = [box.text for box in story_inputs]
                    final_story = story_data[story_selected]["template"].format(*inputs)
                    stage = 4

        pygame.display.flip()

    pygame.quit()
    sys.exit()
if __name__ == "__main__":
    main()
